[[ch:work-stealing]]
== Chapter: Scheduling Multithreaded Programs with Work Stealing

The work-stealing algorithm is a solution to the *_online scheduling
problem_*, where we are given a latexmath:[$P$] workers (a.k.a.,
processors or processes) and a computation dag that unfolds
dynamically during execution, and asked to construct an execution
schedule with minimal length, while spending as little work and time
for scheduling itself.

We consider multithreaded computations represented as dags as
described in <<ch:multithreading, an earlier chapter>>.  To streamline the
analysis, we assume without loss of generality that the root vertex
has a single child.  This assumption eliminates a few corner cases
from the analysis.

=== Work-Stealing Algorithm


In work stealing, each worker maintains a *_deque_*, doubly ended
queue, of vertices.  Each worker tries to work on its local deque as
much as possible. Execution starts with the root vertex in the deque
of one of the workers.  It ends when the final vertex is executed.  

A work stealing scheduler operates as described by our
<<multithreading::scheduler-typical, generic scheduling algorithm>>
but instead of operating on threads, it operates on vertices of the
dag. To obtain work, a worker pops the vertex at the bottom of its
deque and executes it. We refer to the vertex being executed by a
worker as the *_assigned vertex_*.  When executed, the ready vertex
can make the other vertices ready, which are then pushed onto the
bottom end of the deque in an arbitrary order.  If a worker finds its
deque empty, then the worker becomes a *_thief_*.  A thief picks a
*_victim_* worker at random and attempts to steals a thread from
another by popping a thread off the top of the victim's deque.  The
thief performs steal attempts until it successfully steals a thread,
at which point, the thief goes back to work and the stolen thread
becomes its assigned thread.



The pseudo-code for the algorithm is shown below.  All deques are
initially empty and the root vertex is assigned to the worker zero.
The algorithm operates in *_rounds_*.  In each round, a worker
executes the assigned vertex if any, pushes the newly enabled vertices
to its deque, and obtains a new assigned vertex from its deque.  If
the round starts with no assigned vertex then the worker becomes a
thief performs a steal attempt. Note that a steal attempt start and
completes in the same round.

Such a *_steal attempt_* can fail if 

. the victim's deque is empty, or

. contention between workers occurs and the vertex targeted by the
thief is executed by the worker that own the dequer or stolen by
another thief.


For the analysis of the algorithm, we shall assume that each
instruction and each deque operations executes in a single step to
execute.  As a result, each iteration of the loop, a round, completes
in constant steps. 

[source,{cpp}]
----
// Assign root to worker zero.
assignedVertex = NULL
if (self == WorkerZero) {
  assignedVertex = rootVertex
}


// Run scheduling loop.
while (computationDone == false) {

  // Execute assigned vertex.
  if (assignedVertex <> NULL) {
    (nChildren, child1, child2) = execute (assignedVertex)

    if (nChildren == 1) {   
      self.pushBottom child1
    } 
    else {                      
      self.pushBottom child1
      self.pushBottom child2
    }
    assignedVertex = self.popBottom ()
  } 
  else {  
    // Make steal attempt.
    victim = randomWorker ()
    assignedVertex = victim.popTop ()
  }
}
----

NOTE: Note that when a vertex enables two vertices they are both
pushed onto the bottom of the deque in an order that is unspecified.
The analysis holds for any such order. However, realistic
implementations will operate at the granularity of threads as defined
in for example <<ch:fork-join, an earlier chapter>> and by the 
<<multithreading::scheduler-typical, generic scheduling algorithm>>.
To make this algorithm consistent with such implementations, we would
push the vertex that is next in the thread last, so that it is
executed next.  Pushing and popping the vertex in of course
unnecessary and should be avoided in an implementation.  For the
purposes of the analysis, this adds a small constant factor that we
don't care to account for.

==== Deque Specification


The deque supports three methods: 

. `pushBottom`, which pushes a vertex at the bottom end of the deque.

. `popBottom`, which returns the vertex at the bottom end of the
deque if any, or returns `NULL` otherwise.

. `popTop`, returns the vertex at the top end of the deque, if any, or
returns `NULL` if the deque is empty.

For the analysis, we assume that these operations take place
atomically.  We can think of them as starting by taking a lock for the
deque, performing the desired operation, and releasing the lock.

For the analysis, we shall assume that all these operations take
constant time and in fact complete in one step.  This assumption is
somewhat unrealistic, because it is not known whether `popTop` can be
implemented in constant time.  But a relaxed version of `popTop`,
which allows `popTop` to return `NULL` if another concurrent operation
removes the top vertex in the deque, accepts a constant-time
implementation.  This relaxed version suffices for our purposes.

// TODO: How about the owner removing a vertex.
//


==== Work sequence of a worker

Consider the execution of the work stealing algorithm and let
latexmath:[$q$] be any worker.  We define the *_work sequence_* of
latexmath:[$q$] as the sequence of vertices defined by the assigned
vertex of latexmath:[$q$] followed by the vertices in its deque
ordered from bottom to top. If a vertex is in the work sequence of a
worker, then we say that it *_belongs_* to that worker.


.Work sequence
====

Consider the deque for a worker shows below along with the assigned
vertex.  The work sequence for this worker is latexmath:[$\langle
v_0, v_1, v_2, v_3 \rangle$].

image:jpgs-620H/deque-example-1.jpg["",width="50pt",align="center"]

Now, if the worker completes executing $v_0$, which enables no new
children, then the work sequence consist of the vertices in the deque,
i.e., latexmath:[$\langle v_1, v_2, v_3 \rangle$].  If the worker,
later removes latexmath:[$v_1$] from its deque and starts working on
it, i.e., latexmath:[$v_1$] becomes the assigned vertex, then the work
sequence remains the same, i.e., latexmath:[$\langle v_1, v_2, v_3
\rangle$].

====
 
				   
==== Enabling Tree

At any step in an execution, we say that a vertex is *_ready_* if all
the ancestors of the vertex in the dag are executed prior to that
step.  If execution of a vertex latexmath:[$u$] makes ready another
vertex latexmath:[$v$], then we say that latexmath:[$u$] *_enables_*
latexmath:[$v$], and call the edge latexmath:[$(u,v)$] an *_enabling
edge._*  We call latexmath:[$u$] the *_designated parent_* of
latexmath:[$v.$] Every vertex except for the root has a designated
parent.  Therefore the subgraph of the dag consisting of the enabling
edges form a rooted tree, called the *_enabling tree_*.  Note each
execution can have a different enabling tree.


==== An Example Run with Work Stealing

Consider the following computation dag.

image:jpgs-620H/dag-example-1.jpg["",width="300pt",align="center"]

The following drawings illustrate a 2-worker execution of this dag
using work stealing. Time flows left to right and top to bottom.

{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}
image:jpgs-620H/work-stealing-example-1.jpg["",height="150pt",align="left"]
{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}
image:jpgs-620H/work-stealing-example-2.jpg["",height="150pt",align="right"]

image:jpgs-620H/work-stealing-example-3.jpg["",height="150pt",align="left"]
{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}
image:jpgs-620H/work-stealing-example-4.jpg["",height="150pt",align="right"]

image:jpgs-620H/work-stealing-example-5.jpg["",height="150pt",align="left"]
{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}
image:jpgs-620H/work-stealing-example-6.jpg["",height="150pt",align="right"]

image:jpgs-620H/work-stealing-example-7.jpg["",height="150pt",align="left"]
{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}
image:jpgs-620H/work-stealing-example-8.jpg["",height="150pt",align="right"]

{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}
image:jpgs-620H/work-stealing-example-9.jpg["",height="150pt",align="left"]

The enabling tree for this execution is shown below.

image:jpgs-620H/enabling-tree-example-1.jpg["",width="300pt",align="center"]

==== Structural Lemma


.Lemma[Structural Lemma] 
************************

Consider any time in an execution of the work-stealing algorithm after
the execution of the root vertex. Let latexmath:[$v_0, v_1, \ldots,
v_k$] denote the work sequence of any worker. Let latexmath:[$u_0,
u_1, \ldots, u_k$] be the sequence consisting of the designated
parents of the vertices in the work sequence in the same order.  Then
latexmath:[$u_i$] is an ancestor of latexmath:[$u_{i-1}$] in the
enabling tree.  Moreover, we may have latexmath:[$u_0 = u_1$] but for
any latexmath:[$2 \le i \le k$] latexmath:[$u_{i-1} \neq u_i$], that
is the ancestor relationship is proper.

************************


[[dedicated::structural]]
.Structural lemma illustrated.
****
image:jpgs-620H/deques-and-enabling-tree-case-1.jpg["",width="100pt",align="left"]
{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}
image:jpgs-620H/deques-and-enabling-tree-case-2.jpg["",width="100pt",align="right"]
****

The proof of the structural lemma is by induction on the number of
rounds of the execution.  


Consider the first round.  At the initialization and before the
beginning of the first round, all deques are empty, root vertex is
assigned to worker zero but has not been executed.  The root vertex
is then executed. By assumption, the root vertex has a single child
latexmath:[$v$], which becomes enabled and pushed onto the deque and
popped again becoming the assigned vertex at the beginning of the
second round.  At any of point in time after the execution of the
root, worker zero's work sequence consist of latexmath:[$v$].  The
designated parent of latexmath:[$v$] is the root vertex and the lemma
holds trivially.

For the inductive case, assume that the lemma holds up to beginning of
some later round.  We will show that it holds at any point during the
round and also after the completion of the round.


Consider any worker and its deque.  We have two cases to consider.

*Case 1:* There is an assigned vertex, latexmath:[$v_0$], which is executed. 

By the definition of work sequences, we know that latexmath:[$v_1,
\ldots, v_k$] are the vertices in the deque. Let latexmath:[$u_1,
\ldots, u_k$] be their designated parents. By induction, we know that
latexmath:[$u_i$] is an ancestor of latexmath:[$u_{i-1}$] in the
enabling tree and the ancestor relationship is proper except for
latexmath:[$i = 1$], where it is possible that latexmath:[$u_0 =
u_1$].  Immediately after the execution of the assigned node, the work
sequence of the worker consists of all the vertices in the deque and
the lemma follows.


[[dedicated::structural-popbottom-execute]]
.Structural lemma illustrated after the assigned vertex is executed.
image:jpgs-620H/deques-and-enabling-tree-execute.jpg["",width="100pt",align="center"]


After the execution of the assigned vertex latexmath:[$v_0$], we have
several sub-cases to consider.

*Case 1.1:* execution of latexmath:[$v_0$] enables no children. 

Since the deque remains the same, the lemma holds trivially.

*Case 1.2:* execution of latexmath:[$v_0$] enables one child
latexmath:[$x$], which is pushed onto the bottom of the deque.  In this
case, latexmath:[$v_0$] becomes the parent of latexmath:[$x$].  The
lemma holds.

[[dedicated::structural-popbottom-enable-one]]
.Structural lemma illustrated after the assigned vertex enables one child.
image:jpgs-620H/deques-and-enabling-tree-one-child.jpg["",width="100pt",align="center"]


*Case 1.2:* execution of latexmath:[$v_0$] enables two children
  latexmath:[$x,y$], which are pushed to the bottom of the deque in an
  arbitrary order.

In this case, latexmath:[$v_0$] becomes the parent of latexmath:[$x$]
  and latexmath:[$y$].  We need to show that latexmath:[$v_0 \neq
  u_1$].  This holds because latexmath:[$v_0 \neq u_0$] and
  latexmath:[$v_0 \neq u_1$].  The lemma holds.

[[dedicated::structural-popbottom-enable-two]]
.Structural lemma illustrated after the assigned vertex enables two children.
image:jpgs-620H/deques-and-enabling-tree-two-children.jpg["",width="100pt",align="center"]

After the execution of the assigned vertex completes and the children
are pushed, the worker pops the vertex at the bottom of the
deque. There are two cases to consider.

. If the deque is empty, then the worker finds no vertex in its deque
and there is no assigned vertex at the end of the round, thus the work
sequence is empty and the lemma holds trivially.

. If the deque is not empty, then the vertex at the bottom of the
deque becomes the new assigned vertex. The lemma holds trivially
because making the bottom vertex the assigned vertex has no impact on
the work sequence of the worker and thus the correctness of the
lemma.

*Case 2:* A successful steal takes place and removes the top vertex in
  the deque.  In this case, the victim worker loses its top vertex,
  which becomes the assigned vertex of the thief.  The work sequence
  of the victim loses its rightmost element. It is easy to see that
  the lemma continues to hold for the victim.  When the stolen vertex
  is assigned, the work sequence of the thief consist of just the
  stolen vertex and the lemma holds for the thief.
				   
// TODO: SOMETHING FISHY.  WE NEED TO SAY THAT THE LEMMA HOLDS BY
// INDUCTION FOR THE VICTIM.  BUT WE CAN'T BECAUSE TIME HAS PASSED SINCE
// THE LAST ROUND.
//
// DOESN'T IT SUFFICE TO SHOW THIS LEMMA FOR THE BEGINNING OF EACH ROUND.

=== Analysis

The strategy analysis is to assign a potential to each vertex and show
that the potential decreases geometrically as the execution proceeds.

==== Weights

If latexmath:[$d(u)$] is the depth of a vertex latexmath:[$u$] in the
enabling tree, then we define the weight of latexmath:[$u$], written
latexmath:[$w(u)$] as follows latexmath:[$w(u) = S - d(u)$].  The root
has weight latexmath:[$S$].  Intuitively, the weight is equal to the
distance of a vertex from the completion.

A crucial corollary of the structural lemma is that the weights
of the vertices decrease from top to bottom.

.Corrollary
***********

Consider the work sequence of a worker latexmath:[$v_0, v_1, v_2
\ldots v_k$]. We have latexmath:[$w(v_0) \le w(v_1) < w(v_2) \ldots
w(k-1) < w(v_k)$].

***********

==== Balls and Bins Game

One crucial fact behind the analysis is a probabilistic lemma, called
the Balls and Bins lemma. This lemma proves something relatively
intuitive: if you throw as many ball as there are bins, chances are
good that you will have a ball in at least a constant fraction of the
bins, because chances of all balls landing in a small number of bins
is low.

.Lemma[Balls and Bins]
**********************

Suppose that latexmath:[$P$] balls are thrown uniformly and randomly
into latexmath:[$P$] bins, where bin latexmath:[$1 \le i \le P$] has
weight latexmath:[$W_i \ge 0$], and latexmath:[$W = \sum_{i=1}^{P}{W_i}$].  For
each bin, define the random variable

[latexmath]
+++++++++++
$$
X_i = \left\{
\begin{array}{ll}
W_i & \mbox{if a ball lands in bin}~i
\\
0 & \mbox{otherwise}
\end{array}
\right.
$$
+++++++++++

If latexmath:[$X = \sum_{i=1}^{P}{X_i}$], then for any
latexmath:[$\beta, 0 < \beta <  1$], we
have latexmath:[$P \lbrack X \ge \beta W \rbrack > 1 - \frac{1}{(1-\beta)e}$].

************************

.Proof
****

The proof of the lemma is a relatively straightforward application of
Markov's inequality.  Consider the random variable latexmath:[$W_i -
X_i$].  This random variable takes on the value latexmath:[$0$] if a
ball lands in bin latexmath:[$i$] and latexmath:[$W_i$] otherwise.
Thus, we have

[latexmath]
++++
$$
\begin{array}{lll}
E \lbrack W_i - X_i \rbrack  & = & W_i \cdot (1-1/P)^P, \mbox{and}
\\
E \lbrack W - X \rbrack  & = & W \cdot (1-1/P)^P.
\end{array}
$$
++++

We know that latexmath:[$\lim_{P \rightarrow \infty} (1-1/P)^P = 1/e$]
and furthermore that the derivative of this function is non-negative
(the function is non-decreasing).  Thus we know that
latexmath:[$(1-1/P)^P \le 1/e$].

It follows that latexmath:[$ E\lbrack W - X \rbrack \le W / e $].
				   
Since the random variable latexmath:[$W - X$] is a non-negative random
variable, we can apply  Markov's inequality:

[latexmath]
++++
$$
P \lbrack W-X > (1-\beta) W \rbrack \le \frac{E \lbrack
W-X \rbrack}{(1-\beta)W}.
$$
++++
				   
It follows that 

[latexmath]
++++
$$
P \lbrack X < \beta W \rbrack < \frac{1}{(1-\beta)e},
$$
++++

and thus 

[latexmath]
++++
$$
P \lbrack X \ge \beta W \rbrack > 1 - \frac{1}{(1-\beta)e}.
$$
++++
				   

**** 

.An application of the lemma
====

Let's calculate the probability for latexmath:[$\beta = 1/2$].  By the
lemma, we know that if latexmath:[$P$] balls are thrown into
latexmath:[$P$] bins, then the probability that the total weight of
the bins that have a ball in them is at least half the total weight is 
latexmath:[$P \lbrack X \ge \frac{W}{2} \rbrack 1 - \frac{1}{0.5e}$].
Since latexmath:[$e > 2.71$], this quantity can be calculated as at
least latexmath:[$0.25$]. We thus conclude that we using the Ball and
Bins lemma, we can "collect" at least half of the weight with
probability at least latexmath:[$0.25$] 
====




==== Bound in terms of Work and Steal Attempts

.Lemma[Work and Steal Bound] 
*******************

Consider any multithreaded computation with work latexmath:[$W$].  The
latexmath:[$P$]-worker execution time is latexmath:[$O(W/P + A/P)$]
steps where latexmath:[$A$] is the number of steal attempts.

*******************

.Proof
****


Consider the execution in terms of rounds

. If a vertex is executed in that round, then the workeror places a
token into the work bucket.

. If a steal attempt takes place in that round, then the worker
places a token into the steal-attempt bucket.

There are exactly latexmath:[$A$] tokens in the steal-attempt bucket
and exactly latexmath:[$W$] tokens is the work bucket.  Thus the total
number of tokens is at most latexmath:[$W + A$].  Since in each round
a worker either executes a vertex or attempts a steal, and since each
round is a constant number of steps, the latexmath:[$P$]-worker
execution time is latexmath:[$T_P = O(\frac{W + A}{P})$].

****

NOTE: The proof assumes that each instructions including deque
operations takes a (fixed) constant number of steps, because it
assumes that each round contributes to the work or to the steal
bucket.  If this assumption is not valid, then we might need to change
the notion of rounds so that they are large enough for steals to
complete.



==== Bounding the Number of Steal Attempts

Our analysis will use a potential-function based method.  We shall
divide the computation into phases each of which decreases the
potential by a constant factor.


We start with a few definitions.  Consider some round latexmath:[$i$].

. Let latexmath:[$R_i$] denote the set of *_ready vertices_* in the
beginning of that round.  

. A vertex is latexmath:[$R_i$] is either assigned to a worker or is
in a deque.  Let latexmath:[$R_i(q)$] denote the set of *_ready
vertices belonging to a worker latexmath:[$q$]_* at the beginning of
round latexmath:[$i$]; these are exactly the vertices in the work
sequence of that worker.

. For each vertex latexmath:[$v \in R_i$], we define its *_potential_*
as

.. latexmath:[$\phi_i(v) = 3^{2w(v) - 1}$], if latexmath:[$v$] is
assigned, or 

.. latexmath:[$\phi_i(v) = 3^{2w(v)}$], otherwise.

Note that potential of a vertex is always a natural number.

. The *_potential of worker latexmath:[$q$]_* is
latexmath:[$\Phi_i(q) = \sum_{v \in R_i(q)}{\phi_i(v)}.$]

.  We write latexmath:[$H_i$] (mnemonic for "Hood") for the set of
workers whose deques are empty at the beginning of round
latexmath:[$i$].  We write latexmath:[$\Phi_i(H_i)$] for *_the total
potential of the workers latexmath:[$H_i$]_*,
latexmath:[$\Phi_i(H_i) = \sum_{q \in H_i}{\Phi_i(q)}$].

. We write latexmath:[$D_i$] for the set of other workers.  We write
latexmath:[$\Phi_i(D_i)$] for *_the total potential of the workers
latexmath:[$D_i$]_*, latexmath:[$\Phi_i(D_i) = \sum_{q \in
D_i}{\Phi_i(q)}$].

. Define the *_total potential at round latexmath:[$i$]_*, written
latexmath:[$\Phi_i$] as latexmath:[$\Phi_i = \sum_{v \in
R_i}{\phi_i(v)}$].  We can write the total potential in round
latexmath:[$i$] as follows latexmath:[$\Phi_i = \Phi_i(H_i) + \Phi_i(D_i)$].



.Definition: Beginning and termination potential
****

At the beginning of the computation, the only ready vertex is the
root, which has a weight of latexmath:[$S$], because it is also the
root of the enabling tree.  Therefore the potential in the beginning
of the computation is latexmath:[$3^{2S-1}$]. At the end of the
computation, there are no ready vertices and thus the potential is
zero.

****


.Lemma[Top-Heavy Deques]
************************

Consider any round latexmath:[$i$] and any worker latexmath:[$q \in
D_i$].  The topmost vertex in latexmath:[$q$]'s deque contributes at
least latexmath:[$3/4$] of the potential of worker latexmath:[$q$].

************************

.Proof
****
This lemma follows directly from the structural lemma.  The case in
which the topmost vertex latexmath:[$v$] contributes the least of the
worker is when the assigned vertex and latexmath:[$v$] have the same
parent.  In this case, both vertices have the same depth and thus we
have

[latexmath]
+++++++++++
$$
\Phi_i(q) = \phi_i(v) + \phi_i(x) = 3^{2w(v)} + 3^{2w(x)-1} =
3^{2w(v)} + 3^{2w(v)-1} =  (4/3) \phi_i(v).
$$
+++++++++++
****

.Lemma[Vertex Assignment] 
****

Consider any round latexmath:[$i$] and let latexmath:[$v$] be a vertex
that is ready but not assigned at the beginning of that round. Suppose
that the scheduler assigns latexmath:[$v$] to a worker in that round.
In this case, the potential decreases by latexmath:[$2/3 \cdot \phi_i(v)$].

****

.Proof
****

This is a simple consequence of the definition of the potential function:

[latexmath]
+++++++++++
$
\phi_{i}(v) - \phi_{i+1}(v) = 3^{2w(v)} - 3^{2w(v)-1} = 2/3 \phi_i(v).
$
+++++++++++

****

[[lem:work-stealing::potential-decrease]]
.Lemma[Decreasing Total Potential]
****

Total potential does not increase from one round to the next, i.e.,
latexmath:[$\Phi_{i+1} \le \Phi_i$]. 

****

.Proof
****

Let's now consider how the potential changes during each round. 
There are two cases to consider based on scheduler actions.

*Case 1:* Suppose that the scheduler assign a vertex latexmath:[$v$]
to a worker. By the Vertex Assignment Lemma, we know that the
potential decreases by latexmath:[$2/3 \cdot \phi_i(v)$]. Since
latexmath:[$\phi_i(v)$] is positive, the potential decreases.

Note that this calculation holds regardless of where in the deque the
vertex latexmath:[$v$] is.  Specifically, it could have been the
bottom or the top vertex.

*Case 2:* suppose that the scheduler executes a vertex
latexmath:[$v$] and pushes its children onto the deque.  There are two
sub-cases to consider.

*Case 2.1:*
suppose that the scheduler pushes onto the deque the only child
 latexmath:[$x$] of a vertex latexmath:[$v$].  Assuming that the child
 stays in the deque until the beginning of the next round, the
 potential decreases by

[latexmath]
+++++++++++
$$
\phi_{i}(v) - \phi_{i+1}(x) = 3^{2w(v)-1} - 3^{2w(v)-2} =3^{2w(v)-1}(1
- 1/3) = 2/3 \cdot  \phi_i(v).
$$
+++++++++++

*Case 2.2:* suppose that the scheduler pushes onto the deque two
 children latexmath:[$x,y$] of a vertex latexmath:[$v$]. Assuming that
 the children remain in the deque until the beginning of the next
 round, then potential decreases by

[latexmath]
+++++++++++
$$
\begin{array}{lll}
\phi_i(v) - \phi_{i+1}(x) - \phi_{i+1}(y) & = & 3^{2w(v)} - 3^{2w(v)-2}
- 3^{2w(v)-2} 
\\
& = &  3^{2w(v)-1} (1 - 1/3 - 1/3) 
\\
& = & 1/3 \cdot  \phi_i(v).
\end{array}
$$
+++++++++++

Since latexmath:[$\phi_i(v)$] is positive, the potential decreases in
both cases.  Note that, it is safe to assume that the children remain
in the deque until the next round, because assignment of a vertex
decreases the potential further.

In each round each worker performs none, one, or both of these
actions.  Thus the potential never increases.

****

We have thus ustablished that the potential decreases but this by
itself does not suffice.  We also need to show that it decreases by
some significant amount. This is our next step in the analysis. We
show that after latexmath:[$P$] steal attempts the total potential
decreases with constant probability.


//// 

 TODO: The proofs for the following two theorems are somewhat broken.
The potential should be partitioned into two D_i's and H_i's and we
should establish that each decreases by a constant fraction.  We then
put these together.  When doing that we need to argue that we are not
double counting.  

For example let's say that the potential is partitioned evenly between
D_i and H_i.  Then we establish that due that my actions decrease the
potential by 1/4 of the total potential \Phi_i.  Since \Phi_i is
evenly distributed, this means that I am decreasing the potential of
each by 1/2 but I am not decreasing the potential by 1/2 but only by
1/4.  So if I double count, I might get a factor two difference.
Maybe this is not significant.  


In any case, the proofs do not seem to be double counting but it does
not seem to be considered carefully.

////


.Lemma[latexmath:[$P$] Steal Attempts]
*******

Consider any round latexmath:[$i$] and any later round latexmath:[$j$]
such that at least latexmath:[$P$] steal attempts occur at rounds from
latexmath:[$i$] (inclusive) to latexmath:[$j$] (exclusive). Then, we
have

[latexmath]
+++++++++++
$$
Pr \lbrack \Phi_i - \Phi_j \ge \frac{1}{4} \Phi_i(D_i) \rbrack > \frac{1}{4}.
$$
+++++++++++
*******

.Proof:
****

*First* we use the Top-Heavy Deques Lemma to establish the
following. If a steal attempt targets a worker with a nonempty deque as its
victim, then the potential decreases by at least of a half of the
potential of the victim.

Consider any worker latexmath:[$q$] in latexmath:[$D_i$] and let
latexmath:[$v$] denote the vertex at the top of its deque at round
latexmath:[$i$].  By Top-Heavy Deques Lemma, we have 
latexmath:[$\phi_i(v) \ge \frac{3}{4} \Phi_i(q)$].

Consider any steal attempt that occurs at round latexmath:[$k \ge i$].

. Suppose that this steal attempt is sucessful with `popTop` returning a
vertex. The two subcases both follow by the Vertex Assignment Lemma.

.. If the returned vertex is latexmath:[$v$], then after round
latexmath:[$k$], vertex latexmath:[$v$] has been assigned and possibly
executed. Thus, the potential has decreased by at least
latexmath:[$\frac{2}{3}\, \phi_i(u)$].

.. If the returned vertex is not latexmath:[$v$], then latexmath:[$v$]
is already assigned and possibly executed. Thus, the potential has
decreased by at least latexmath:[$\frac{2}{3}\, \phi_i(v)$].

. Suppose that the steal attempt is not succesful, and `popTop` returns
`NULL`.  In this case, we know that latexmath:[$q$]'s deque was empty
during `popTop`, or some other `popTop` or `popBottom` operation
returned latexmath:[$v$].  In all cases, vertex latexmath:[$v$] has
been assigned or possibly executed by the end of round latexmath:[$k$]
and thus, potential decreases by latexmath:[$\frac{2}{3}\, \phi_i(v)$].


Thus, we conclude that if a thief targets a worker latexmath:[$q \in
D_i$] as victim at round latexmath:[$k \ge i$], then the potential
decreases by at least

[latexmath]
+++++++++++
$$
\frac{2}{3}\, \phi_i(u) \ge \frac{2}{3} \frac{3}{4} \Phi_i(q)  =
\frac{1}{2} \Phi_i(q).
$$
+++++++++++

*Second*, we use Ball and Bins Lemma to establish the total decrease
 in potential.

Consider now all latexmath:[$P$] workers and latexmath:[$P$] steal
attempts that occur at or after round latexmath:[$i$].  For each
worker latexmath:[$q$] in latexmath:[$D_i$], assign a weight of
latexmath:[$\frac{1}{2}\Phi_i(q)$] and for each worker in
latexmath:[$H_i$], assign a weight of latexmath:[$0$].  The total
weight is thus latexmath:[$\frac{1}{2} \Phi_i(D_i)$].  Using the
Balls-and-Bins Lemma with latexmath:[$\beta = 1/2$], we conclude that
the potential decreases by at least latexmath:[$\beta W = \frac{1}{4}
\Phi_i(D_i)$] with probability greater that latexmath:[$1 -
\frac{1}{(1-\beta) e} > \frac{1}{4}$].

****


IMPORTANT: For this lemma to hold, it is crucial that a steal attempt
does not fail unless the deque is empty or the vertex being targeted
at the time is popped from the deque is some other way.  This is why,
we required the `popTop` operation called by a worker to fail only if
the top vertex is removed from the deque by another worker.


.Theorem[Run-Time Bound]
****

Consider any multithreaded computation with work latexmath:[$W$] and
span latexmath:[$S$] and execute it with non-blocking work stealing
with latexmath:[$P$] workers in a dedicated environment.  The
exection time is

. latexmath:[$O(W/P + S)$] in expectation, and 

. latexmath:[$O(W/P + S + \lg(1/\epsilon))$] with probability at least
latexmath:[$1-\epsilon$] for any latexmath:[$\epsilon > 0$].

****

.Proof
****

The Steal Attempt-Bound Lemma bounds the execution time in terms of
steal attempts.  We shall prove bounds on the number of steal
attempts.


We break execution into *_phases_* of latexmath:[$\Theta(P)$] steal
attempts.  We show that with constant probability, a phase causes the
potential to drop by a constant factor, and since the potential starts
at latexmath:[$\Phi_0 = 3^{2S -1}$] and ends at zero, and is always an
natural number, we can bound the number of phases.

The first phase begins at round latexmath:[$1$] and ends at the first
round latexmath:[$k$], where at least latexmath:[$P$] throws occur
during the interval latexmath:[$\lbrack 1,k \rbrack $].  The
second phase begins at round latexmath:[$k + 1$] and so on.

Consider a phase latexmath:[$[i,j)$], where the next phase begins at
round latexmath:[$j$].  We show that latexmath:[$\Pr \lbrack \Phi_j
\le \frac{3}{4} \Phi_i \rbrack < \frac{1}{4}$].

Recall that the potential can be partitioned as latexmath:[$\Phi_i =
\Phi_i(H_i) + \Phi_i(D_i)$].

. Since the phase contains at least latexmath:[$P$] steal attempts, by
latexmath:[$P$] Steal Attempts Lemma, we know that latexmath:[$P \lbrack
\Phi_i - \Phi_j \ge \frac{1}{4} \Phi_i(D_i) \rbrack > \frac{1}{4}$].

. We need to show that the potential also drops by a constant fraction
of latexmath:[$\Phi_i(H_i)$].  Consider some worker latexmath:[$q$]
in latexmath:[$H_i$].  If latexmath:[$q$] does not have an assigned
vertex, then latexmath:[$\Phi_i(q) = 0$].  If latexmath:[$q$] has an
assigned vertex latexmath:[$v$], then latexmath:[$\Phi_i(q) =
\phi_i(v)$].  In this case, worker latexmath:[$q$] executes
latexmath:[$v$] at round latexmath:[$i$] and the potential decreases
by at least latexmath:[$\frac{1}{3} \phi_i(u)$] by an argument
included in the proof of <<lem:work-stealing::potential-decrease,
Decreasing Potential Lemma>>.

Summing over all workers in latexmath:[$H_i$], we have
latexmath:[$\Phi_i - \Phi_j \ge \frac{1}{3} \Phi_i(H_i)$].

Thus we conclude that latexmath:[$P \lbrack \Phi_i - \Phi_j \ge
\frac{1}{4} \Phi_i \rbrack > \frac{1}{4}$].  In other words, we
established that in any phase, potential drops by a quarter with some
probability latexmath:[$\frac{1}{4}$].


Define a phase to be *_successful_* if it causes the potential do
decrease by at least a quarter fraction.  We just established that
phase is successful with probability at least
latexmath:[$0.25$]. Since the start potential latexmath:[$\Phi_0 =
3^{2S -1}$] and ends at zero and is always an integer, the number of
successful phases it as most latexmath:[$(2S-1)\, \log_{4/3}{3} < 8
S$].


The expected number of phases to obtain a single successful phase is
distributed geometrically with expectation latexmath:[$4$].
Therefore, the total expected number of phases is latexmath:[$32S$],
i.e., latexmath:[$O(S)$].  Since each phase contains
latexmath:[$O(P)$] steal attempts, the expected number of steal
attempts is latexmath:[$O(SP)$].

We now establish the high-probability bound.  

Suppose that the execution takes latexmath:[$n = 32S + m$] phases.
Each phase succeds with probability at least latexmath:[$p =
\frac{1}{4}$], so the expected number of successes is at least
latexmath:[$np = 8S + m/4$].  Let latexmath:[$X$] the number of
successes.  By Chernoff bound

[latexmath]
+++++++++++
$$
P \lbrack X < np -a \rbrack < e^{-a^2/2np},
$$
+++++++++++

with latexmath:[$a = m/4$].  Thus if we choose latexmath:[$m = 32S + 16 \ln{1/\epsilon}$], then we have

[latexmath]
+++++++++++
$$
P \lbrack X < 8 S \rbrack < e^{-(m/4)^2 / (16S + m/2)} 
\le  e^{-(m/4)^2 / (m/2 + m/2)} 
=  e^{-m/16}
\le  e^{-16\ln{1/\epsilon}/16}
= \epsilon.
$$
+++++++++++

Thus the probabilty that the execution takes latexmath:[$64S + 18
\ln{1/\epsilon)}$] phases or more is less than latexmath:[$\epsilon$].

We conclude that the number of steal attempts is latexmath:[$O(S +
\lg{1/\epsilon}P)$] with probability at least latexmath:[$1 -
\epsilon$].

****

=== Chapter Notes.

The material presented here is a adapted from the paper:

http://link.springer.com/article/10.1007/s00224-001-0004-z[N. S. Arora,
R. D. Blufome, and C. Greg Plaxton.  Thread Scheduling for
Multiprogrammed Multiprocessors. Theory of Computing Systems, 34(2),
2001].

In this chapter, we consider dedicated environments, and simplify and
streamline the proof for this case.  The original paper considers
multiprogrammed environments.


